// Generated by Dart Safe Data Class Generator. * Change this header on extension settings *
// ignore_for_file: type=lint
import 'package:calendar_exemple/event.dart';
import 'package:dartx/dartx.dart';
import 'package:flutter/material.dart';
import 'package:flutter_animate/flutter_animate.dart';
import 'package:intl/intl.dart' hide TextDirection;
import 'package:table_calendar/table_calendar.dart';

class CalendarPage extends StatefulWidget {
  const CalendarPage({super.key});

  @override
  State<CalendarPage> createState() => _CalendarPageState();
}

class _CalendarPageState extends State<CalendarPage> {
  DateTime selectedDate = DateTime.now();

  var tableCells = <List<CellModel>>[];

  var timeUnit = 5;
  var timeUnitInHours = 10;

  List<List<CellModel>> tableData(
    List<Event> list,
    DateTime startDay,
  ) {
    return List.generate(
      timeUnitInHours * (60 ~/ timeUnit),
      (i) => List.generate(
        7,
        (j) {
          var type = CellType.none;
          final day = startDay.add(Duration(days: j, minutes: timeUnit * i));
          final appointment = list.firstOrNullWhere(
            (e) {
              return (day.isAfter(e.startAt) ||
                      day.isAtSameMomentAs(e.startAt)) &&
                  (day.isBefore(e.endAt));
            },
          );

          if (appointment != null) {
            if (appointment.eventSize == 1) {
              type = CellType.filled;
            } else if (day.isAtSameMomentAs(appointment.startAt)) {
              type = CellType.start;
            } else if (day
                .isAtSameMomentAs(appointment.endAt - timeUnit.minutes)) {
              type = CellType.end;
            } else {
              type = CellType.middle;
            }
          }
          return CellModel(
            (i, j),
            clinicalAppointment: appointment,
            type: type,
          );
        },
      ),
    );
  }

  List<Event> clinicalAppointments = [
    Event(
      title: 'Event 01',
      startAt: DateTime.utc(2024, 04, 29, 08, 00),
      endAt: DateTime.utc(2024, 04, 29, 09, 00),
    ),
    Event(
      title: 'Event 02',
      startAt: DateTime.utc(2024, 04, 30, 09, 00),
      endAt: DateTime.utc(2024, 04, 30, 09, 30),
    ),
    Event(
      title: 'Event 03',
      startAt: DateTime.utc(2024, 05, 02, 10, 00),
      endAt: DateTime.utc(2024, 05, 02, 10, 45),
    ),
  ];

  @override
  void initState() {
    tableCells =
        tableData(clinicalAppointments, DateTime.utc(2024, 04, 28, 08, 00));
    super.initState();
  }

  @override
  void reassemble() {
    tableCells =
        tableData(clinicalAppointments, DateTime.utc(2024, 04, 28, 08, 00));
    super.reassemble();
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      backgroundColor: Colors.grey[200],
      appBar: AppBar(
        backgroundColor: Colors.blue,
        foregroundColor: Colors.white,
        title: const Text('Calendar Pose'),
      ),
      body: Container(
        padding: const EdgeInsets.all(16),
        margin: const EdgeInsets.only(top: 24, left: 32, right: 32),
        decoration: BoxDecoration(
          color: Colors.white,
          borderRadius: BorderRadius.circular(6),
          border: Border.all(color: Color(0xFF5184E4).withOpacity(0.2)),
        ),
        child: Column(
          mainAxisSize: MainAxisSize.min,
          children: [
            TableCalendar(
              focusedDay: DateTime.now().toUtc(),
              firstDay: DateTime.utc(2020, 10, 16),
              lastDay: DateTime.utc(2025, 10, 16),
              daysOfWeekVisible: false,
              locale: 'pt_BR',

              calendarBuilders: CalendarBuilders(
                // * Customized the day
                prioritizedBuilder: (_, date, __) => WeekDays(
                  date: date,
                  selectedDate: selectedDate,
                ),
              ),
              headerStyle: const HeaderStyle(
                titleCentered: true,
                formatButtonVisible: false,
                titleTextStyle: TextStyle(
                  fontSize: 20,
                  fontWeight: FontWeight.bold,
                ),
              ),
              // calendarStyle: CalendarStyle(
              //   todayDecoration: const BoxDecoration(
              //     color: Colors.blue,
              //     shape: BoxShape.circle,
              //   ),
              //   selectedDecoration: BoxDecoration(
              //     color: Colors.blue[200],
              //     shape: BoxShape.circle,
              //   ),
              //   selectedTextStyle: TextStyle(color: Colors.black),
              //   todayTextStyle: TextStyle(color: Colors.white),
              // ),
              rowHeight: 64,
              calendarFormat: CalendarFormat.week,
              onDaySelected: (selectedDay, focusedDay) {
                setState(() => selectedDate = selectedDay);
              },
              selectedDayPredicate: (day) {
                return isSameDay(selectedDate, day);
              },
            ),
            SizedBox(height: 8),
            Expanded(
              child: EventTable(
                startOfWeek: DateTime(2024, 4, 28),
                timeUnit: 30.minutes,
                events: [
                  Event(
                    title: 'Event 01',
                    startAt: DateTime.utc(2024, 04, 28, 08, 00),
                    endAt: DateTime.utc(2024, 04, 28, 09, 00),
                  ),
                  Event(
                    title: 'Event 02',
                    startAt: DateTime.utc(2024, 04, 30, 09, 00),
                    endAt: DateTime.utc(2024, 04, 30, 09, 30),
                  ),
                  Event(
                    title: 'Event 03',
                    startAt: DateTime.utc(2024, 05, 01, 10, 00),
                    endAt: DateTime.utc(2024, 05, 01, 11, 45),
                  ),
                  Event(
                    title: 'Event 03',
                    startAt: DateTime.utc(2024, 05, 02, 10, 00),
                    endAt: DateTime.utc(2024, 05, 02, 10, 45),
                  ),
                ],
              ),
            ),
          ],
        ),
      ),
    );
  }
}

class EventTable extends StatelessWidget {
  const EventTable({
    super.key,
    required this.startOfWeek,
    required this.timeUnit,
    required this.events,
    this.startTime = const TimeOfDay(hour: 8, minute: 0),
    this.endTime = const TimeOfDay(hour: 18, minute: 0),
    this.cellHeight = 24.0,
  });
  final DateTime startOfWeek;
  final Duration timeUnit;
  final TimeOfDay startTime;
  final TimeOfDay endTime;
  final double cellHeight;
  final List<Event> events;

  @override
  Widget build(BuildContext context) {
    Animate.restartOnHotReload = true;
    Animate.defaultDuration = 1200.ms;
    Animate.defaultCurve = Curves.fastOutSlowIn;

    double topDistance(DateTime startAt) {
      final difference = startAt.inMinutes - startTime.inMinutes;
      return difference / timeUnit.inMinutes;
    }

    int leftDistance(DateTime startAt) {
      // we ignore the time of the day
      return startAt.date.difference(startOfWeek.date).inDays;
    }

    final cellRatio = 60 / timeUnit.inMinutes;
    final cellCount = (endTime.hour - startTime.hour) * cellRatio;

    return LayoutBuilder(builder: (context, constraints) {
      final width = constraints.maxWidth / 7;
      final height = cellRatio * cellHeight;

      return SingleChildScrollView(
        child: SizedBox(
          height: cellCount * height,
          child: Stack(
            children: [
              Column(
                mainAxisSize: MainAxisSize.min,
                children: [
                  for (var i = 0; i < cellCount; i++)
                    Row(
                      children: [
                        for (var j = 0; j < 7; j++)
                          SuperHero(
                            maxHeigth: 600,
                            maxWidth: 400,
                            child: Container(
                              height: height,
                              width: width,
                              decoration: BoxDecoration(
                                color: Colors.white,
                                border: Border.all(color: Colors.grey.shade300),
                                borderRadius: BorderRadius.circular(8),
                              ),
                              // time:
                              child: Text(
                                '${(startTime.inMinutes + (i * timeUnit.inMinutes)) ~/ 60}:${(startTime.inMinutes + (i * timeUnit.inMinutes)) % 60}',
                              ),
                            ),
                          ),
                      ],
                    ),
                ],
              ),
              for (final (index, event) in events.indexed)
                Positioned(
                  top: topDistance(event.startAt) * height,
                  left: leftDistance(event.startAt) * width,
                  height: (event.inMinutes / timeUnit.inMinutes) * height,
                  width: width,
                  child: SuperHero(
                    maxHeigth: 600,
                    maxWidth: 400,
                    child: EventCard(event: event),
                  ),
                ).animate(delay: 200.ms * index).scaleXY(begin: 1.1).fadeIn(),
            ],
          ),
        ),
      );
    });
  }
}

class SuperHero extends StatelessWidget {
  const SuperHero({
    super.key,
    this.duration = const Duration(milliseconds: 900),
    this.barrierColor = Colors.black54,
    this.maxHeigth,
    this.maxWidth,
    this.rootNavigator = true,
    this.barrierDismissible = true,
    this.replacement,
    required this.child,
  });
  final Duration duration;
  final Color barrierColor;
  final double? maxHeigth;
  final double? maxWidth;
  final bool rootNavigator;
  final bool barrierDismissible;
  final Widget? replacement;
  final Widget child;

  @override
  Widget build(BuildContext context) {
    return GestureDetector(
      onTap: () {
        Navigator.of(context, rootNavigator: rootNavigator).push(
          PageRouteBuilder(
            opaque: false,
            barrierColor: barrierColor,
            barrierDismissible: barrierDismissible,
            transitionDuration: duration,
            pageBuilder: (context, _, __) {
              return Center(
                child: SizedBox(
                  height: maxHeigth,
                  width: maxWidth,
                  child: Hero(
                    tag: hashCode,
                    child: Material(
                      type: MaterialType.transparency,
                      child: replacement ?? child,
                    ),
                  ),
                ),
              );
            },
          ),
        );
      },
      child: Hero(
        tag: hashCode,
        child: Material(
          type: MaterialType.transparency,
          child: child,
        ),
      ),
    );
  }
}

class EventCard extends StatelessWidget {
  const EventCard({super.key, required this.event});
  final Event event;

  @override
  Widget build(BuildContext context) {
    return Container(
      decoration: BoxDecoration(
        color: Colors.blue,
        borderRadius: BorderRadius.circular(8),
      ),
      child: SingleChildScrollView(
        padding: EdgeInsets.all(8),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            Text(event.title),
            Text('${event.inMinutes} minutos'),
          ],
        ),
      ),
    );
  }
}

extension on DateTime {
  int get inMinutes => hour * 60 + minute;
}

extension on TimeOfDay {
  int get inMinutes => hour * 60 + minute;
}

class SelectWeek extends StatelessWidget {
  const SelectWeek({
    super.key,
    required this.startOfWeek,
    required this.weekDays,
    required this.months,
    required this.onPreviousWeek,
    required this.onNextWeek,
  });

  final DateTime startOfWeek;
  final List<String> weekDays;
  final List<String> months;
  final VoidCallback onPreviousWeek;
  final VoidCallback onNextWeek;

  @override
  Widget build(BuildContext context) {
    return Row(
      mainAxisSize: MainAxisSize.min,
      children: [
        IconButton.outlined(
          onPressed: onPreviousWeek,
          icon: const Icon(Icons.arrow_back_ios_rounded, size: 18),
          style: ButtonStyle(
            side: MaterialStatePropertyAll(
              BorderSide(color: Colors.grey.shade300),
            ),
            shape: MaterialStatePropertyAll(
              RoundedRectangleBorder(
                borderRadius: BorderRadius.circular(10),
              ),
            ),
          ),
        ),
        //

        Container(
          margin: const EdgeInsets.symmetric(horizontal: 8),
          padding: const EdgeInsets.symmetric(horizontal: 16, vertical: 8),
          decoration: BoxDecoration(
            border: Border.all(color: Colors.grey.shade300),
            borderRadius: BorderRadius.circular(10),
          ),
          child: Text(
            '${startOfWeek.day.toString().padLeft(2, '0')} '
            '${months[startOfWeek.month - 1].substring(0, 3)}, '
            '${startOfWeek.year} - '
            '${startOfWeek.add(const Duration(days: 6)).day.toString().padLeft(2, '0')} '
            '${months[startOfWeek.add(const Duration(days: 6)).month - 1].substring(0, 3)} '
            '${startOfWeek.year}',
          ),
        ),

        //
        IconButton.outlined(
          onPressed: onNextWeek,
          icon: const Icon(Icons.arrow_forward_ios_rounded, size: 18),
          style: ButtonStyle(
            side: MaterialStatePropertyAll(
              BorderSide(color: Colors.grey.shade300),
            ),
            shape: MaterialStatePropertyAll(
              RoundedRectangleBorder(
                borderRadius: BorderRadius.circular(10),
              ),
            ),
          ),
        ),
      ],
    );
  }
}

class WeekDays extends StatelessWidget {
  const WeekDays({
    super.key,
    required this.date,
    required this.selectedDate,
  });

  final DateTime date;
  final DateTime selectedDate;

  @override
  Widget build(BuildContext context) {
    final dayOfWeek = DateFormat.EEEE('pt_BR').format(date).split('-')[0];
    final dayOfMonth = date.day.toString().padLeft(2, '0');

    final today = DateTime.now();

    return Container(
      decoration: BoxDecoration(
        borderRadius: BorderRadius.circular(8),
        color: (!isSameDay(selectedDate, date) && isSameDay(today, date))
            ? Colors.grey.shade300
            : isSameDay(selectedDate, date)
                ? const Color(0xFF5184E4).withOpacity(0.2)
                : null,
      ),
      padding: const EdgeInsets.all(8),
      child: Column(
        children: [
          Text(
            dayOfWeek,
            style: TextStyle(
              color: isSameDay(selectedDate, date)
                  ? const Color(0xFF5184E4)
                  : Colors.black54,
              fontWeight: FontWeight.w300,
            ),
          ),
          Text(
            dayOfMonth,
            style: TextStyle(
              color: isSameDay(selectedDate, date)
                  ? const Color(0xFF5184E4)
                  : null,
              fontSize: 18,
              fontWeight: FontWeight.bold,
            ),
          ),
        ],
      ),
    );
  }
}

class Cell extends StatelessWidget {
  const Cell({
    super.key,
    required this.clinicalAppointment,
    required this.type,
  });

  final Event? clinicalAppointment;
  final CellType type;

  @override
  Widget build(BuildContext context) {
    return Container(
      padding: EdgeInsets.all(3),
      decoration: type.boxDecoration.copyWith(
        border: Border.all(color: Colors.grey.shade300),
      ),
      height: 32,
      width: 100,
      child: Center(
        child: Text(
          clinicalAppointment?.title ?? '',
          overflow: TextOverflow.ellipsis,
        ),
      ),
    );
  }
}

enum CellType {
  start(
    BoxDecoration(
      color: Color(0xFFFFF0E8),
      borderRadius: BorderRadius.vertical(
        top: Radius.circular(10),
      ),
    ),
  ),
  middle(BoxDecoration(color: Color(0xFFFFF0E8))),
  end(
    BoxDecoration(
      color: Color(0xFFFFF0E8),
      borderRadius: BorderRadius.vertical(
        bottom: Radius.circular(10),
      ),
    ),
  ),

  filled(
    BoxDecoration(
      color: Color(0xFFFFF0E8),
      borderRadius: BorderRadius.all(
        Radius.circular(10),
      ),
    ),
  ),

  none(BoxDecoration());

  const CellType(this.boxDecoration);

  final BoxDecoration boxDecoration;
}

class CellModel {
  final Event? clinicalAppointment;
  final CellType type;
  final (int i, int j) position;

  const CellModel(
    this.position, {
    required this.clinicalAppointment,
    required this.type,
  });
}
