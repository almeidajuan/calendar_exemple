// Generated by Dart Safe Data Class Generator. * Change this header on extension settings *
// ignore_for_file: type=lint
import 'package:calendar_exemple/atendimento_model.dart';
import 'package:flutter/material.dart';
import 'package:intl/intl.dart';
import 'package:table_calendar/table_calendar.dart';

class CalendarPage extends StatefulWidget {
  const CalendarPage({super.key});

  @override
  State<CalendarPage> createState() => _CalendarPageState();
}

class _CalendarPageState extends State<CalendarPage> {
  DateTime selectedDate = DateTime.now();

  List<AtendimentoModel> atendimentos = [
    AtendimentoModel('Event 01', DateTime.utc(2024, 04, 29, 08, 15),
        DateTime.utc(2024, 04, 29, 08, 30))
  ];

  List<AtendimentoModel> atendimentoBlocks = List.generate(
    40,
    (index) {
      var minuteDuration = index * 15;

      var count = 0;
      count = index % 4 == 0 ? count++ : count;

      return AtendimentoModel(
        '',
        DateTime.utc(2024, 04, 29, 08 + count, minuteDuration),
        DateTime.utc(2024, 04, 29, 08 + count, minuteDuration + 15),
      );
    },
  );

  void buildEventBlock() {
    for (final (i, block) in atendimentoBlocks.indexed) {
      for (final (j, atendimento) in atendimentos.indexed) {
        if (block.startAt == atendimento.startAt) {
          setState(
            () {
              atendimentoBlocks.removeRange(i, i + atendimento.eventSize);
              atendimentoBlocks.insert(i, atendimento);
            },
          );
        }
      }
    }
  }

  void goToPreviousWeek() {
    setState(() {
      selectedDate = selectedDate.subtract(const Duration(days: 7));
    });
  }

  // void goToNextWeek() {
  //   setState(() {
  //     selectedDate = selectedDate.add(const Duration(days: 7));
  //   });
  // }

  @override
  void initState() {
    buildEventBlock();
    super.initState();
  }

  @override
  Widget build(BuildContext context) {
    List<String> weekDays = [
      'Domingo',
      'Segunda',
      'Terça',
      'Quarta',
      'Quinta',
      'Sexta',
      'Sábado'
    ];
    List<String> months = [
      'Janeiro',
      'Fevereiro',
      'Março',
      'Abril',
      'Maio',
      'Junho',
      'Julho',
      'Agosto',
      'Setembro',
      'Outubro',
      'Novembro',
      'Dezembro',
    ];

    DateTime startOfWeek =
        selectedDate.subtract(Duration(days: selectedDate.weekday - 1));
    List<DateTime> weekDates =
        List.generate(7, (index) => startOfWeek.add(Duration(days: index)));

    return Scaffold(
      backgroundColor: Colors.grey[200],
      appBar: AppBar(
        backgroundColor: Colors.blue,
        foregroundColor: Colors.white,
        title: const Text('Calendar Pose'),
      ),
      body: Column(
        children: [
          TableCalendar(
            focusedDay: DateTime.now().toUtc(),

            calendarBuilders: CalendarBuilders(
              dowBuilder: (context, day) {
                return Center(
                  child: Container(
                    color: Colors.blue,
                    child: Text(
                      DateFormat.EEEE('pt_BR').format(day).split('-')[0],
                      style: TextStyle(
                        color: isSameDay(selectedDate, day)
                            ? Colors.red
                            : Colors.black,
                        fontWeight: FontWeight.bold,
                      ),
                    ),
                  ),
                );
              },
            ),
            locale: 'pt_BR',
            firstDay: DateTime.utc(2020, 10, 16),
            lastDay: DateTime.utc(2025, 10, 16),
            headerStyle: const HeaderStyle(
              titleCentered: true,
              formatButtonVisible: false,
              titleTextStyle: TextStyle(
                fontSize: 20,
                fontWeight: FontWeight.bold,
              ),
            ),
            // calendarStyle: CalendarStyle(
            //   todayDecoration: const BoxDecoration(
            //     color: Colors.blue,
            //     shape: BoxShape.circle,
            //   ),
            //   selectedDecoration: BoxDecoration(
            //     color: Colors.blue[200],
            //     shape: BoxShape.circle,
            //   ),
            //   selectedTextStyle: TextStyle(color: Colors.black),
            //   todayTextStyle: TextStyle(color: Colors.white),
            // ),
            daysOfWeekHeight: 30,
            calendarFormat: CalendarFormat.week,
            onDaySelected: (selectedDay, focusedDay) {
              setState(() {
                selectedDate = selectedDay;
              });
            },
            selectedDayPredicate: (day) {
              return isSameDay(selectedDate, day);
            },
          ),
          Row(
            mainAxisAlignment: MainAxisAlignment.spaceAround,
            children: List.generate(
              7,
              (index) => SingleChildScrollView(
                child: Column(
                  children: List.generate(
                    atendimentoBlocks.length,
                    (index) {
                      final event = atendimentoBlocks[index];

                      return Padding(
                        padding: const EdgeInsets.only(bottom: 8),
                        child: AtendimentoWidget(atendimento: event),
                      );
                    },
                  ),
                ),
              ),
            ),
          ),
        ],
      ),

      // Container(
      //   margin: const EdgeInsets.symmetric(horizontal: 32, vertical: 16),
      //   padding: const EdgeInsets.all(16),
      //   decoration: BoxDecoration(
      //     color: Colors.white,
      //     borderRadius: BorderRadius.circular(8),
      //   ),
      //   child: Column(
      //     children: [
      //       SelectWeek(
      //         startOfWeek: startOfWeek,
      //         weekDays: weekDays,
      //         months: months,
      //         onPreviousWeek: goToPreviousWeek,
      //         onNextWeek: goToNextWeek,
      //       ),
      //       const SizedBox(height: 16),
      //       WeekDays(
      //         weekDates: weekDates,
      //         selectedDate: selectedDate,
      //         weekDays: weekDays,
      //       ),
      //     ],
      //   ),
      // ),
    );
  }
}

class SelectWeek extends StatelessWidget {
  const SelectWeek({
    super.key,
    required this.startOfWeek,
    required this.weekDays,
    required this.months,
    required this.onPreviousWeek,
    required this.onNextWeek,
  });

  final DateTime startOfWeek;
  final List<String> weekDays;
  final List<String> months;
  final VoidCallback onPreviousWeek;
  final VoidCallback onNextWeek;

  @override
  Widget build(BuildContext context) {
    return Row(
      mainAxisSize: MainAxisSize.min,
      children: [
        IconButton.outlined(
          onPressed: onPreviousWeek,
          icon: const Icon(Icons.arrow_back_ios_rounded, size: 18),
          style: ButtonStyle(
            side: MaterialStatePropertyAll(
              BorderSide(color: Colors.grey.shade300),
            ),
            shape: MaterialStatePropertyAll(
              RoundedRectangleBorder(
                borderRadius: BorderRadius.circular(10),
              ),
            ),
          ),
        ),
        //

        Container(
          margin: const EdgeInsets.symmetric(horizontal: 8),
          padding: const EdgeInsets.symmetric(horizontal: 16, vertical: 8),
          decoration: BoxDecoration(
            border: Border.all(color: Colors.grey.shade300),
            borderRadius: BorderRadius.circular(10),
          ),
          child: Text(
            '${startOfWeek.day.toString().padLeft(2, '0')} '
            '${months[startOfWeek.month - 1].substring(0, 3)}, '
            '${startOfWeek.year} - '
            '${startOfWeek.add(const Duration(days: 6)).day.toString().padLeft(2, '0')} '
            '${months[startOfWeek.add(const Duration(days: 6)).month - 1].substring(0, 3)} '
            '${startOfWeek.year}',
          ),
        ),

        //
        IconButton.outlined(
          onPressed: onNextWeek,
          icon: const Icon(Icons.arrow_forward_ios_rounded, size: 18),
          style: ButtonStyle(
            side: MaterialStatePropertyAll(
              BorderSide(color: Colors.grey.shade300),
            ),
            shape: MaterialStatePropertyAll(
              RoundedRectangleBorder(
                borderRadius: BorderRadius.circular(10),
              ),
            ),
          ),
        ),
      ],
    );
  }
}

class WeekDays extends StatelessWidget {
  const WeekDays({
    super.key,
    required this.weekDates,
    required this.selectedDate,
    required this.weekDays,
  });

  final List<DateTime> weekDates;
  final DateTime selectedDate;
  final List<String> weekDays;

  @override
  Widget build(BuildContext context) {
    final now = DateTime.now();
    return Row(
      mainAxisAlignment: MainAxisAlignment.spaceAround,
      children: weekDates.map(
        (date) {
          final isDateSelected = (date.day == now.day &&
              date.month == now.month &&
              date.year == now.year);

          return Container(
            decoration: BoxDecoration(
              borderRadius: BorderRadius.circular(8),
              color: isDateSelected
                  ? const Color(0xFF5184E4).withOpacity(0.2)
                  : null,
            ),
            padding: const EdgeInsets.all(8),
            child: Column(
              children: [
                Text(
                  weekDays[date.weekday - 1],
                  style: TextStyle(
                    color: isDateSelected
                        ? const Color(0xFF5184E4)
                        : Colors.black54,
                    fontWeight: FontWeight.w300,
                  ),
                ),
                Text(
                  date.day.toString().padLeft(2, '0'),
                  style: TextStyle(
                    color: isDateSelected ? const Color(0xFF5184E4) : null,
                    fontSize: 18,
                    fontWeight: FontWeight.bold,
                  ),
                ),
              ],
            ),
          );
        },
      ).toList(),
    );
  }
}

class AtendimentoWidget extends StatelessWidget {
  const AtendimentoWidget({
    super.key,
    required this.atendimento,
  });

  final AtendimentoModel atendimento;

  @override
  Widget build(BuildContext context) {
    return Container(
      // padding: EdgeInsets.all(8),
      decoration: BoxDecoration(
        color: Colors.blue,
        borderRadius: BorderRadius.circular(8),
      ),
      height: atendimento.durationInMinutes.toDouble() * 3,
      width: 50,
      child: Center(child: Text(atendimento.title)),
    );
  }
}
